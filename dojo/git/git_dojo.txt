Ironhack - dojo git

USER 1:

1. GET START WITH LOCAL GIT

- Create a directory
mkdir dir_dojo

- Check if the directory were correctly imported
ls

- Change directory
cd dir_dojo

- list hidden file
ls -la

- Inform the local machine that the currently directory is a git directory
git init

- Check the hidden file
ls -la

- Create README.md file
echo “# test repo” >> README.md

- check the status
git status

- add README.md to the stage area
git add README.md

- check the status again: what have changed?
git status

- show README.md content
git show README.md

- reset file to local repository
git reset README.md 

- Include info README.md file
echo “# dojo data analytics” >> README.md

- add README.md to the stage area
git add README.md

- check the status
git status

- Commit changes
git commit -m ‘message’

- check the status once more
git status

QUEST: what have changed?

- check the hash log
git log

NOTE: It is the first repo commit <3


2. CONNECT TO GitHub

- Authenticate with git
curl -u ‘<user name>’ https://api.github.com/user
		authenticate with password

NOTE: it returns a JSON file

- Create a repository
curl -u ‘<username>’ https://api.github.com/user/repos -d '{"name”:”<repo_name>”, “private”: true}’

NOTE: it returns a JSON file again!

NOTE GitHub: Check github website

- Inform git the location to send local files to a remote repository
git remote add origin https://github.com/lclarete/<repo_name>.git

- check the remote address (fetch and push)
git remote -v

- check the remote branch
git remote

NOTE: If you wanna change the remote repository address go for
git remote set-url https://github.com/lclarete/dojo_test.git

- push code locally from origin to master
git push -u origin master

NOTE GitHub: 
- Check github website
- Compare the hash from git and from github


2. FILE VERSION CONTROL

- create a dataset.csv file
touch dataset.csv

- create an empty test.py
touch test.py

- check the status
git status

- Create a .gitignore 
echo “*csv” >> .gitignore

- check the status
git status

QUEST: What just happened to the dataset.csv file?

- add the test.py to the stage area
git add test.py

- check the stage area again
git status

- reset with reset
git reset file.py

- check the stage area once more
git status

- add the test.py to the stage area again 
git add test.py

- commit the file to local repository
git commit -m ‘empty test.py’

- check the status
git status

QUEST: What just happen to the test.py?

- find the commit’s hash
git log

- show the modification from last commit
git show HEAD
git show hash

- revert the commit
git revert harsh

- check the hash log
git log

QUEST: What just happen the hash log?

- update github
git push

NOTE GitHub: 
- Check github website
- Compare the hash from git and from github

QUEST: what have changed to the files we just uploaded?

- create an empty file.py
touch file.py

- check the status
git status

QUEST: What does untracked mean?

- add to the stage area
git add file.py

- commit
git commit -m ‘empty file’

- check hash log
git log

- add some text to file.py
echo ‘print(“hello”) >> file.py

- check the status
git status

QUEST: What is the difference from untracked to changes not staged?

- execute file using python
python -m file.py

- add the file to the stage 
git add file.py

- check the status
git status

- commit the file to local repository
git commit -m ‘print function’

- check the history of hashs
git log

- show modifications from file.py
git show file.py
git diff


3. HANDLING BRANCHES

- create a branch
git branch math

- check all the repo’s branches
git branch

- go to the math branch
git checkout math

- check in what branch are we
git branch

NOTE GitHub: 
- Check github website
- How many branches does github show?

- connect the branch with upstream method 
git push --set-upstream origin math

NOTE GitHub: 
- Check github website
- And now, how many branches does github show?

- Include the following code to file.py
echo ‘print(10+20) >> file.py

- execute the file
python -m file.py

- check the status
git status

- add the file to the stage area
git add file.py

- check the status
git status

- commit the file to local repository from branch math
git commit -m “math function”

- check the hash log
git log

QUESTS: 
- What is the most updated branch?
- What is the last commit to github?

- Show modifications 
git show hash
git show file.py

- checkout to master branch
git checkout master

- check the current branch
git branch

- check the file.py 
git show file.py

QUESTS: 
- Where is the ‘math function’ from file.py?

- check the hash log
git log

QUESTS: 
- What is the most updated branch?
- Where is the ‘math’ local branch?

- merge the branches
git merge master

QUESTS: 
- If we have changed the file.py, why git is telling us it is up to date?

- correctly merge the branches
git merge math

QUESTS: 
- What Fast-forward mean?

- check the hash log
git log

- check the file.py
git show file.py

- get GitHub updated
git push

NOTE GitHub: 
- Check github website

- check the hash log
git log

QUESTS: 
- Where are the status of each branch?

- go to the branch math
git checkout math

- check the current branch
git branch

- update math branch
git push

- check the hash log
git log


NOTE GitHub: 
- Check github website